import os
import sys
import subprocess
import threading
import time
import ctypes
import win32service
import win32serviceutil
from PIL import Image, ImageDraw
import pystray
import tkinter as tk
from tkinter import messagebox

class ZapretTrayApp:
    def __init__(self):
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        self.is_admin = self.check_admin()
        self.icon = None
        self.setup_tray_icon()
        
    def check_admin(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False

    def get_service_status(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã zapret"""
        try:
            status = win32serviceutil.QueryServiceStatus('zapret')
            if status[1] == win32service.SERVICE_RUNNING:
                return "running", "üü¢ –ó–∞–ø—É—â–µ–Ω–∞"
            elif status[1] == win32service.SERVICE_STOPPED:
                return "stopped", "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        except:
            pass
        
        # Fallback —á–µ—Ä–µ–∑ sc query
        try:
            result = subprocess.run('sc query zapret', capture_output=True, text=True, shell=True)
            if "RUNNING" in result.stdout:
                return "running", "üü¢ –ó–∞–ø—É—â–µ–Ω–∞"
            elif "STOPPED" in result.stdout:
                return "stopped", "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        except:
            pass
            
        return "not_found", "‚ö´ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    def run_cmd(self, command, wait=True):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        try:
            if wait:
                result = subprocess.run(command, shell=True, capture_output=True, text=True, 
                                      cwd=self.script_dir, encoding='utf-8')
                return result.returncode == 0, result.stdout, result.stderr
            else:
                subprocess.Popen(command, shell=True, cwd=self.script_dir)
                return True, "", ""
        except Exception as e:
            return False, "", str(e)

    def start_service(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É"""
        def task():
            success, stdout, stderr = self.run_cmd('net start zapret')
            if success:
                self.show_notification("Zapret", "–°–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚úÖ")
            else:
                if "—É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞" in stderr or "already running" in stderr:
                    self.show_notification("Zapret", "–°–ª—É–∂–±–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                else:
                    self.show_error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", stderr)
            self.update_icon_menu()
            
        threading.Thread(target=task, daemon=True).start()

    def stop_service(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É"""
        def task():
            success, stdout, stderr = self.run_cmd('net stop zapret')
            if success:
                self.show_notification("Zapret", "–°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚èπÔ∏è")
            else:
                if "–Ω–µ –∑–∞–ø—É—â–µ–Ω–∞" in stderr or "not started" in stderr:
                    self.show_notification("Zapret", "–°–ª—É–∂–±–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    self.show_error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", stderr)
            self.update_icon_menu()
            
        threading.Thread(target=task, daemon=True).start()

    def restart_service(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É"""
        def task():
            self.run_cmd('net stop zapret')
            time.sleep(2)
            self.run_cmd('net start zapret')
            self.show_notification("Zapret", "–°–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ üîÑ")
            self.update_icon_menu()
            
        threading.Thread(target=task, daemon=True).start()

    def run_updater(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        updater_path = os.path.join(self.script_dir, "auto_updater.bat")
        if os.path.exists(updater_path):
            self.run_cmd(f'"{updater_path}"', wait=False)
            self.show_notification("Zapret", "–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        else:
            self.show_error("–û—à–∏–±–∫–∞", "auto_updater.bat –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        status, status_text = self.get_service_status()
        admin_text = "‚úÖ –ï—Å—Ç—å" if self.is_admin else "‚ùå –ù–µ—Ç"
        
        messagebox.showinfo("–°—Ç–∞—Ç—É—Å Zapret", 
                          f"{status_text}\n\n"
                          f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_text}\n"
                          f"–ü–∞–ø–∫–∞: {self.script_dir}")

    def show_notification(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–∫–æ–Ω–∫—É
            if self.icon:
                self.icon.notify(message, title)
        except:
            pass

    def show_error(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è messagebox
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror(title, message)
            root.destroy()
        except:
            pass

    def create_icon_image(self, status):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        width = 64
        height = 64
        image = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(image)
        
        # –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == "running":
            color = "green"
        elif status == "stopped":
            color = "red"
        else:
            color = "gray"
            
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–Ω–∞—á–æ–∫ —â–∏—Ç–∞
        draw.rectangle([16, 12, 48, 44], fill=color, outline="black", width=2)
        draw.rectangle([20, 16, 44, 40], fill="white")
        draw.rectangle([24, 20, 40, 36], fill=color)
        
        return image

    def setup_tray_icon(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ"""
        status, status_text = self.get_service_status()
        image = self.create_icon_image(status)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        menu_items = []
        
        # –°—Ç–∞—Ç—É—Å
        admin_text = " (–ê–¥–º–∏–Ω)" if self.is_admin else ""
        menu_items.append(pystray.MenuItem(f"Zapret{admin_text}", None, enabled=False))
        menu_items.append(pystray.MenuItem(f"–°—Ç–∞—Ç—É—Å: {status_text}", None, enabled=False))
        menu_items.append(pystray.MenuItem("---", None, enabled=False))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–æ–π
        menu_items.append(pystray.MenuItem("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", self.start_service))
        menu_items.append(pystray.MenuItem("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self.stop_service))
        menu_items.append(pystray.MenuItem("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", self.restart_service))
        menu_items.append(pystray.MenuItem("---", None, enabled=False))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        menu_items.append(pystray.MenuItem("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å", self.show_status))
        menu_items.append(pystray.MenuItem("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.run_updater))
        menu_items.append(pystray.MenuItem("---", None, enabled=False))
        
        # –í—ã—Ö–æ–¥
        menu_items.append(pystray.MenuItem("‚ùå –í—ã—Ö–æ–¥", self.exit_app))
        
        menu = pystray.Menu(*menu_items)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
        self.icon = pystray.Icon("zapret_tray", image, "Zapret Controller", menu)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.icon.run, daemon=True)
        thread.start()

    def update_icon_menu(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∏–∫–æ–Ω–∫–∏"""
        if self.icon:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            self.icon.stop()
            self.setup_tray_icon()

    def exit_app(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.icon:
            self.icon.stop()
        os._exit(0)

def main():
    # –°–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã messagebox
    root = tk.Tk()
    root.withdraw()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import pystray
        from PIL import Image
        import win32service
    except ImportError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", 
                           f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n{e}\n\n"
                           "–ó–∞–ø—É—Å—Ç–∏—Ç–µ install_requirements_fixed.bat")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ZapretTrayApp()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    app.show_notification("Zapret", "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ç—Ä–µ–µ")
    
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.exit_app()

if __name__ == "__main__":
    main()